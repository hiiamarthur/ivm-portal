<!-- bundle -->
<script src="../../assets/js/vendor.min.js"></script>
<script src="../../assets/js/app.min.js"></script>
<!-- date-fns -->
<script src="../../assets/js/date-fns-browserify.js"></script>
<!-- flatpickr -->
<link rel="stylesheet" type="text/css" href="../../assets/css/vendor/flatpickr-dark.css">

<script src="../../assets/js/vendor/flatpickr.min.js"></script>

<script>
    back = () => {
        window.location.replace(document.referrer);
    }
    handleSelectBoxChange = (selectBox, hiddenInput) => {
        const hiddenEl = document.querySelector(`input[name=${hiddenInput}]`);
        document.querySelector(`#${selectBox}`).addEventListener('change', (event) => {
           const selectedOption = document.querySelector(`#${selectBox} option:checked`)
           hiddenEl.value = selectedOption.value;
        })
    }

    getMultiSelectValue = (selectBoxId) => {
        return $(`#${selectBoxId}`).val().length > 0 ? JSON.stringify($(`#${selectBoxId}`).val()) : null;
    }

    setMultiSelectValue = (selectBoxId, values) => {
        $(`#${selectBoxId}`).val(values);
        $(`#${selectBoxId}`).trigger('change');
    }

    const validateForm = (formId) => {
        const inputs = [...document.querySelectorAll(`#${formId} input`),...document.querySelectorAll(`#${formId} select`),...document.querySelectorAll(`#${formId} textarea`)];
        inputs.every((item, index) => {
            if(item.required && !item.disabled) {
                const validClass = (item.value !== null && item.value !== '') ? 'is-valid': 'is-invalid';
                item.classList.add(validClass);
                item.parentElement.classList.add('was-validated');
            } 
            return item;
        })
        if(document.querySelectorAll(`#${formId} .is-invalid`).length > 0) {
            return false;
        }
        return true;
    }

    const getCheckboxStatus = (checkboxes) => {
        let rtn = {};
        checkboxes.every((el, idx) => {
            const name = el.getAttribute('name');
            rtn[name] = el.checked;
            return el;
        })
        return rtn;
    }

    const getFormData = (elId) => {
        const formEl = document.querySelector(`#${elId}`);
        if(formEl){
            const validation = validateForm(elId);
            if(!validation) {
                return null;
            }
            const dataObj = Object.fromEntries(new FormData(formEl));
            const numbers = [...document.querySelectorAll(`#${elId} input[type=number]`)];
            numbers.every((el, index) => {
                dataObj[el.getAttribute('name')] = parseFloat(el.value);
                return el;
            })
            const checkboxes = [...document.querySelectorAll(`#${elId} input[type=checkbox]`)];
            checkboxes.every((el, index) => {
                dataObj[el.getAttribute('name')] = el.checked ? 1 : 0
                return el
            })
            //.replace(/\r\n|\r|\n/g, '<br />')
            const textareas = [...document.querySelectorAll(`#${elId} textarea`)];
            textareas.every((el, index) => {
                dataObj[el.getAttribute('name')] = el.value.replace(/\r\n|\r|\n/g, '<br />')
                return el;
            })
            const selectBoxes = [...document.querySelectorAll(`#${elId} select`)];
            selectBoxes.every((s, index) => {
                if(s.getAttribute('name') && s.value) {
                    dataObj[s.getAttribute('name')] = s.value
                }
                return s;
            })
            return dataObj
        }
        return null
    }

    const afterSaveSuccess = () => {
        const activateControls = document.querySelector('#activateControls');
        const deactivateControls = document.querySelector('#deactivateControls');
        if(activateControls){
            activateControls.classList.remove('d-none');
        }
        if(deactivateControls){
            deactivateControls.classList.add('d-none');
        }
    }

    const beforeOrSaveFail = () =>{
        const activateControls = document.querySelector('#activateControls');
        const deactivateControls = document.querySelector('#deactivateControls');
        if(activateControls){
            activateControls.classList.add('d-none');
        }
        if(deactivateControls){
            deactivateControls.classList.remove('d-none');
        }
    }

    const formControlsAttr = (formId) => {
        const activateControls = document.querySelector('#activateControls');
        const deactivateControls = document.querySelector('#deactivateControls');
        const enableFormBtn = document.querySelector('#enableForm');
        const cancelBtn = document.querySelector('#cancelBtn');
        const controls = [...document.querySelectorAll(`#${formId} input`), ...document.querySelectorAll(`#${formId} select`), ...document.querySelectorAll(`#${formId} textarea`)];
        if(enableFormBtn) {
            enableFormBtn.addEventListener('click', (event) => {
                controls.every((el, index) => {
                    const type = el.getAttribute('type');
                    const name = el.getAttribute('name');
                    if(type && type == 'hidden') {
                        return el;
                    }
                    if(name && name === 'ON_OwnerID' && el.value !== '') {
                        return el;
                    }
                    if(el.disabled) {
                        el.disabled = false;
                    }
                    return el
                })
                beforeOrSaveFail();
                event.preventDefault();
            })
        }
        
        if(cancelBtn) {
            cancelBtn.addEventListener('click', (event) => {
                clearFormValidation(formId);
                const pathname = window.location.pathname;
                controls.every((el, index) => {
                    const type = el.getAttribute('type');
                    const id = el.getAttribute('id');
                    if(type && type == 'hidden') {
                        return el;
                    }
                    if(pathname.indexOf('add') === -1 && pathname.indexOf('create') === -1) {
                        el.disabled = !el.disabled;
                    }
                    if(pathname.indexOf('add') !== -1 || pathname.indexOf('create') !== -1) {
                        if(!el.classList.contains('flatpickr-input') && id !== 'sBackDay') {
                            el.value = '';
                        }
                        if(el.classList.contains('select2')) {
                            $(el).val(null);
                            $(el).trigger('change');
                        }
                        if(type === 'checkbox' && el.getAttribute('id') !== 'MV_Valid') {
                            el.checked = false;
                        }
                    }
                    return el
                })
                if(pathname.indexOf('voucher/add') !== -1) {
                    document.querySelector('#generateCodeBtn').classList.add('d-none');
                }
                afterSaveSuccess();
                event.preventDefault();
            })
        }
    }

    const clearFormValidation = (formId) => {
        const controls = [...document.querySelectorAll(`#${formId} .was-validated`), ...document.querySelectorAll(`#${formId} .is-invalid`), ...document.querySelectorAll(`#${formId} .is-valid`), ...document.querySelectorAll(`#${formId} .border-danger`)];
        controls.every((el, index) => {
            el.classList.remove('is-valid');
            el.classList.remove('is-invalid');
            el.classList.remove('was-validated');
            el.classList.remove('border-danger');
            return el
        })    
    }

    const removeActiveClass = (tabs, tabpanes) => {
        tabs.forEach(t => {
            t.classList.remove('active');
        })
        tabpanes.forEach(el => {
            el.classList.remove('show');
            el.classList.remove('active');
        })
    }

    const initTabControl = (tabs, tabpanes) => {
        tabs.every((el, index) => {
            el.addEventListener('click', (event) =>{
                const tabId = el.getAttribute('href');
                const contentEl = document.querySelector(tabId);
                removeActiveClass(tabs, tabpanes);
                if (contentEl) {
                    el.classList.add('active');
                    contentEl.classList.add('show');
                    contentEl.classList.add('active');
                }       
                event.preventDefault();
            })
            return el;
        })
    }

    const showAlert = (alertId, msg) => {
        const alertEl = document.querySelector(`#${alertId}`);
        const alertMsg = document.querySelector(`#${alertId} #message`);
        alertMsg.textContent = msg;
        alertEl.classList.add('show');
        alertEl.classList.remove('d-none');
    }

    const hideAlert = (alertId, event) => {
        const alertEl = document.querySelector(`#${alertId}`);
        alertEl.classList.remove('show');
        alertEl.classList.add('d-none');
    }

    const openSearchProductModal = (event, formAction) => {
        const modalEl = document.querySelector('#searchProductModal');
        const modalInstance = bootstrap.Modal.getOrCreateInstance(modalEl);
        const modalTitleEl = document.querySelector('#searchProductModalLabel');
        const formEl = document.querySelector('#item-search');
        const includeSKUEl = document.querySelector('#includeSKU');
        formEl.setAttribute('action', formAction);
        if(formAction === 'sku-search') {
            includeSKUEl.classList.add('d-none');
            modalTitleEl.textContent = 'Search Stock';
        }
        modalInstance.show();
        event.preventDefault();
    }

    const enableBtnGp = () => {
        const btngrp = [...document.querySelectorAll('#btngrp button')];
        const selection = [...document.querySelectorAll('input[name=selection]:checked')];
        btngrp.every((el, index) => {
            el.disabled = selection.length > 0 ? false : true;
            return el;
        })
    }

    const changeVoucherStatus = (newStatus, element) => {
        const iscampaign = element.dataset.iscampaign;
        const selection = [...document.querySelectorAll('input[name=selection]:checked')];
        let url;
        let params;

        if(iscampaign && eval(iscampaign)){
            url = '/campaign/voucher/batchupdate';
            const vouchers = selection.reduce((acc, s) => {
                const item = {
                    CV_CampaignID: s.dataset.campaignId,
                    CV_VoucherCode: s.dataset.vouchercode,
                    CV_Valid: newStatus === 'invalid' ? false : true,
                    CV_Used: newStatus === 'used' ? true : false
                }
                if(newStatus === 'used') {
                    item['CV_UsedTime'] = new Date()
                }
                acc.push(item);
                return acc;
            },[]);
            params = JSON.stringify({
                vouchers: vouchers
            }); 
        } else {
            url = '/voucher/change-status';
            const voucherCodes = selection.reduce((acc, s) => {
                acc.push(s.dataset.vouchercode);
                return acc;
            },[]);
            params = JSON.stringify({
                voucherStatus: newStatus,
                voucherCodes: voucherCodes
            });
        }

        fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: params
        })
        .then((response) => {
            if(response.status === 200) {
                alert('update success');
                setTimeout(() => {
                    window.location.reload();
                }, 500);
            } else {
                alert('error');
            }
        })
        .catch(error => {
            console.log(error)
        })
    }
</script>

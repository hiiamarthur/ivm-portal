<div class="tab-pane fade machinetps" id="channel-list" role="tabpanel" aria-labelledby="tab-4">
    <div class="card">
        <div class="card-body">
            <div id="chAlert" class="row alert alert-warning fade" role="alert">
                <div class="col">
                    <div class="float-start" id="message">This is a test alert</div>
                <a href="javascript:void(0);" onclick="closeAlert()" class="float-end btn text-white px-0 py-0" aria-label="Close">X</a>
            </div>
            </div>
            <div class="table-responsive">
                <table id="machine-channel" class="dataTable table table-dark nowrap w-100">
                    <thead>
                        <tr>
                            {{#each channelListOp}}
                            <th id="{{ this.data }}" class="text-center">{{ this.title }}</th>
                            {{/each}}
                        </tr>
                    </thead>
                    <tbody>

                        {{#each channel}}
                        <tr id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}">
                            <td class="text-center">{{ this.MC_ChannelID }}</td>
                            <td>
                                <select class="border-white rounded isActive px-3 py-1 mx-auto" id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_Active" disabled>
                                    <option class="text-danger" value="0" {{#unless this.MC_Active }}selected{{/unless}}>&#xf00d;</option>
                                    <option class="text-success" value="1" {{#if this.MC_Active }}selected{{/if}}>&#xf00c;</option>
                                </select>
                            </td>
                            <td>
                                <select class="form-select mx-auto" id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_StockCode"
                                    style="width:500px!important" disabled>
                                    <option value="" {{#unless MC_StockCode}}selected{{/unless}} disabled>未選擇產品</option>
                                    {{#each ../channelSkuOptions}}
                                    <option value="{{this.value}}" {{#ifCond this.value '==='
                                        ../MC_StockCode}}selected{{/ifCond}}>{{this.name}}</option>
                                    {{/each}}
                                </select>
                            </td>
                            <td>
                                <input type="number" id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_Capacity"
                                    class="form-control pe-0 mx-auto" min="0" value="{{ MC_Capacity }}" style="width:50px!important"
                                    disabled />
                            </td>
                            <td class="text-center">
                                <input type="number" id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_Balance"
                                    class="form-control pe-0 mx-auto" min="0"
                                    value="{{#if MC_Balance }}{{ MC_Balance }}{{else}}0{{/if}}"
                                    style="width:50px!important" disabled />
                            </td>
                            <td id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_statusText" class="{{#ifCond MC_Status '!==' 255}}text-success{{else}}text-danger{{/ifCond}} text-center align-middle">
                                {{ statusText }}
                            </td>
                            <td class="text-center">
                               {{ MC_ExpiryDate }}
                            </td>
                            <td class="text-center align-middle">
                                <input type="number" id="ch_{{this.MC_MachineID}}_{{this.MC_ChannelID}}_Status"
                                    class="form-control pe-0 mx-auto" min="0" value="{{ MC_Status }}"
                                    style="width:70px!important" disabled />
                            </td>
                            <td></td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

</div>
<style>
    .isActive {
        appearance: none;
        background-color: var(--ct-dark);
        color: var(--ct-light);
        font-family:"FontAwesome";
    }
    .isActive * {
        font-size: 24px;
    }
    .isActive::before{
        vertical-align:middle;
    }
</style>
<script>
    const updateRequest = (reqBody, callback) => {
        fetch('/machine/update-channel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(reqBody)
        })
        .then(response => {
            if(response.status === 200) {
                return response.json();
            } else {
                throw new Error(`update fail`)
            }
        })
        .then(data => {
            if(callback) {
                callback(data);
            }
        })
        .catch((error) => {
            document.querySelector('#chAlert').classList.remove('alert-warning');
            document.querySelector('#chAlert').classList.add('alert-danger');
            document.querySelector('#chAlert #message').textContent = error;
        });
    }

    const editChannel = (el) => {
        const rowId = el.dataset.rowid;
        const controls = [...document.querySelectorAll(`#${rowId} input`), ...document.querySelectorAll(`#${rowId} select`)];
        const activeBtns = document.querySelector(`#${rowId} .activeBtns`);
        controls.every((el, index) => {
            if (el.disabled) {
                el.disabled = false
            }
            return el;
        })
        flatpickr('.chexpire', {
            enableTime: true,
            dateFormat: "Y/m/d H:i",
            minDate: "today",
            time_24hr: true
        })
        if(activeBtns) {
            el.parentElement.classList.add('d-none');
            activeBtns.classList.remove('d-none');
        }
        //event.preventDefault();
    }

    const hideControls = (el) => {
        const rowId = el.dataset.rowid;
        const controls = [...document.querySelectorAll(`#${rowId} input`), ...document.querySelectorAll(`#${rowId} select`)];
        const deactiveBtns = document.querySelector(`#${rowId} .deactiveBtns`);
        controls.every((el, index) => {
            if (!el.disabled) {
                el.disabled = true
            }
            return el;
        })
        
        if(deactiveBtns){
            el.parentElement.classList.add('d-none');
            deactiveBtns.classList.remove('d-none');
        }
        //event.preventDefault();
    }

    const showAlert = (msg) => {
        const chAlert = document.querySelector('#chAlert');
        const alertMsg = document.querySelector('#chAlert #message');
        alertMsg.textContent = msg;
        chAlert.classList.add('show');
        chAlert.classList.remove('d-none');
    }

    const closeAlert = () => {
        const chAlert = document.querySelector('#chAlert');
        const alertMsg = document.querySelector('#chAlert #message');
        chAlert.classList.remove('show');
        chAlert.classList.add('d-none');
        alertMsg.textContent = '';
    }
    
    document.addEventListener('DOMContentLoaded', () => {
        const columnDefs = [{
            orderable: false,
            targets: [0, 1, 2, -2]
        },{
            data: 'num',
            width: 70,
            targets: [1, 3, 4]
        },{
            width: 600,
            targets: [2]
        }, {
            type: 'date',
            render: function (data, type, row) {
                if (!data) {
                    //input type="text" class="form-control" data-provide="datepicker" data-date-container="#datepicker1" data-date-format="yyyy-MM-dd HH:mm:ss"
                    return `<input type="text" style="width:160px" class="chexpire form-control mx-auto" id="${row.DT_RowId}_ExpiryDate" disabled>`
                }
                return `<input type="text" style="width:160px" class="chexpire form-control mx-auto" id="${row.DT_RowId}_ExpiryDate" value="${dateFns.format(new Date(data), 'yyyy/MM/dd HH:mm')}" disabled>`
            },
            targets: [-3]
        }]
       const dtCh = initMachineTables('machine-channel', columnDefs);
       const updateBtns = [...document.querySelectorAll('.updateBtns')];
       updateBtns.every((el, index) => {
            el.addEventListener('click', (event) => {
                const button = event.target;
                const rowId = button.dataset.rowid;
                const controls = [...document.querySelectorAll(`#${rowId} input`), ...document.querySelectorAll(`#${rowId} select`)];
                const reqBody = controls.reduce((acc, input) => {
                    const name = `MC${input.getAttribute('id').substring(10)}`;
                    const value = input.value || input.seleted;
                    const type = input.getAttribute('type');
                    acc[name] = type !== 'number' ? value: parseInt(value);
                    return acc;
                }, {});
                if(reqBody['MC_Balance'] > reqBody['MC_Capacity']){
                    showAlert('Balance cannot be greater than capacity');
                    return false;
                }
                reqBody['MC_MachineID'] = rowId.split('_')[1];
                reqBody['MC_ChannelID'] = parseInt(rowId.split('_')[2])
                updateRequest(reqBody, (data) => {
                    const msg = 'update success';
                    showAlert(msg);
                    hideControls(button);
                    const stEl = document.querySelector(`#ch_${data.MC_MachineID}_${data.MC_ChannelID}_statusText`);
                    stEl.textContent = data.statusText;
                    console.log(data.MC_Status != 0);
                })
            })
            return el;
       })       
       const clearErrBtns = [...document.querySelectorAll('.clearErrBtn')];
       clearErrBtns.every((el, index) => {
            el.addEventListener('click', (event) => {
                const button = event.target;
                const rowId = button.dataset.rowid;
                const reqBody = {
                    MC_MachineID: rowId.split('_')[1],
                    MC_ChannelID: parseInt(rowId.split('_')[2]),
                    MC_Status: 0,
                    MC_ErrorCode: 0,
                    MC_MCUClearError: 1,
                    MC_MCUUpdate: 1,
                };
                updateRequest(reqBody, (data) => {
                    const msg = 'update success';
                    showAlert(msg);
                    const stEl = document.querySelector(`#ch_${data.MC_MachineID}_${data.MC_ChannelID}_statusText`);
                    document.querySelector(`#ch_${data.MC_MachineID}_${data.MC_ChannelID}_Status`).value = data.MC_Status;
                    stEl.textContent = data.statusText;
                    stEl.classList.remove('text-danger');
                    stEl.classList.add('text-success');
                })
                event.preventDefault();
            })
            return el;
       })
    })    
</script>
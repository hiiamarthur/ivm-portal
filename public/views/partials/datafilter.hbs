<div class="card card-primary">
    <form id="datafilter" action="{{ action }}" method="{{ method }}">
        <div class="card-header">
            <h3 class="card-title">搜尋</h3>
        </div>
        <div class="card-body">

            <div class="row">
                {{#if showDateRangeFilter}}
                <label class="d-none d-md-block">日期</label>
                <div class="col-lg-6 col-sm-12 mb-lg-0 mb-1">
                    <div id="drp" class="input-group">
                        <input type="text" class="form-control date" id="from" name="from">
                        <span class="input-group-text">至</span>
                        <input type="text" class="form-control date" id="to" name="to">
                    </div>
                </div>
                {{/if}}
                <div class="col-lg-6 col-sm-12">
                    <select id="machineIds" name="machineIds" class="form-control select2" data-toggle="select2"
                        multiple data-placeholder="請選擇售賣機">
                        <optgroup label="[機號] - 機名 - (型號)">
                            {{#each machineList}}
                            <option value="{{ this.M_MachineID }}">
                                [{{ this.M_MachineID }}] - {{ this.M_Name }} - ({{ this.type.machineTypeID }}: {{ this.type.name }})</option>
                            {{/each}}
                        </optgroup>
                    </select>
                </div>
                {{#if showActiveMachine }}
                <div class="col-lg-6 col-sm-12">
                    <div class="form-check form-switch">
                        <input type="checkbox" class="form-check-input" id="activeMachineOnly" name="activeMachineOnly"
                            checked>
                        <label class="form-check-label" for="activeMachineOnly">營運中</label>
                    </div>
                </div>
                {{/if}}
                {{#if productList}}
                <div class="col-lg-6 col-sm-12">
                    <select id="productIds" name="productIds" class="form-control select2" data-toggle="select2"
                        multiple data-placeholder="請選擇產品">
                        <optgroup label="[產品編號] 產品名稱 - 售價">
                            {{#each productList}}
                            <option value="{{ this.MP_ProductID }}">[{{ this.MP_ProductID }}] - {{ this.MP_ProductName }} - ${{
                                this.MP_UnitPrice }}</option>
                            {{/each}}
                        </optgroup>
                    </select>
                </div>
                {{/if}}
            </div>

        </div>
        <div class="card-footer">
            <button type="submit" class="btn btn-primary"><i class="fas fa-search me-1"></i>搜尋</button>
            <button type="button" class="btn btn-outline-dark ms-2"><i class="fas fa-xmark me-1"></i>重置</button>
            {{#if showExport}}
            <button type="button" class="btn btn-outline-dark float-end" id="btnExport"><i
                    class="fas fa-file-export me-1"></i>Export Excel</button>
            {{/if}}
        </div>
    </form>
</div>

{{> scripts}}
<style>
    .select2 {
        border-color: #6c757d !important;
    }

    .select2-selection--multiple,
    .select2-selection__rendered {
        background-color: #343a40 !important;
    }

    .select2-selection__choice,
    .select2-selection__choice__remove {
        background-color: #343a40 !important;
    }

    .dataTables_length {
        float: right;
    }
    .badge {
        font-size: medium;
    }
</style>
<link rel="stylesheet" href="../../assets/css/daterangepicker.css">
<script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.2.0/dist/js/datepicker-full.min.js"></script>

{{> datatable-script }}
<script>
    const formEl = document.querySelector('form');
    const fmAction = formEl.getAttribute('action');
    const fmMethod = formEl.getAttribute('method');
    const machineIdSelector = document.querySelector('#machineIds');
    const productIdSelector = document.querySelector('#productIds');
    const activeMachineFilter = document.querySelector('#activeMachineOnly');
    const btnExport = document.querySelector('#btnExport');

    const getSelectBoxValue = (selectBoxId) => {
        return $(selectBoxId).val().length > 0 ? JSON.stringify($(selectBoxId).val()) : null;
    }
    const clearSelections = (selectBoxId) => {
        $(selectBoxId).val(null).trigger('change');
    }

    const getRequestParams = () => {
        const formData = new FormData(formEl);
        const machineIdsDoms = Array.from(document.querySelectorAll('#select2-machineIds-container li'));

        if (machineIdSelector) {
            const selectedVal = getSelectBoxValue('#machineIds');
            if (selectedVal) {
                formData.set('machineIds', selectedVal);
            }
        }

        if (productIdSelector) {
            const selectedVal = getSelectBoxValue('#productIds');
            if (selectedVal) {
                formData.set('productIds', selectedVal);
            }
        }

        if (activeMachineFilter) {
            const isChecked = activeMachineFilter.checked;
            formData.set('active', isChecked ? 1 : 0);
        }
        return Object.fromEntries(formData);
    }

    const getColumnDefs = (action) => {
        switch (action) {
            case 'iv_summary':
                return [{
                    type: 'num-fmt',
                    render: function (data, type, row) {
                        return `${data}%`;
                    },
                    targets: [2, 5],
                }]
            case 'iv_detail':
                return [{
                    type: 'num-fmt',
                    render: function (data, type, row) {
                        return `${data}%`;
                    },
                    targets: 4,
                }]
            case 'machine/list':
                return [{
                    render: function (data, type, row) {
                        switch(data.toLowerCase()){
                            case 'offline':
                            return `<span class="badge bg-danger">${data}</span>`;
                            case 'online':
                            return `<span class="badge bg-success">${data}</span>`;
                            default: 
                            return data
                        }
                        return data ? parseFloat(data) : '-';
                    },
                    targets: 3
                },
                {
                    type: 'num',
                    render: function (data, type, row) {
                        return data ? parseFloat(data) : '-';
                    },
                    targets: 5
                },
                {
                    data: null,
                    render: function(data, type, row) {
                        return `<a class='btn btn-outline-dark' href='/machine/detail?machineId=${row.MachineID}'>詳情</a>`
                    },
                    targets: 8
                }]
            default:
                return null;
        }
    }

    const exportData = (dt) => {
        let dtInfo = dt.page.info();
        if (dtInfo.recordsTotal === 0) {
            alert('沒有記錄')
            return
        }
        const sortCol = [...document.querySelectorAll('#result th')].filter((node) => { return node.getAttribute('class').indexOf('sorting_') !== -1 })[0];
        let sorting = {
            order: [...document.querySelectorAll('#result th')][0].getAttribute('id'),
            dir: 'ASC'
        }
        if (sortCol) {
            const id = sortCol.getAttribute('id');
            const sortClasses = sortCol.getAttribute('class').split(' ');
            sorting = {
                column: id,
                dir: sortClasses[1].split('_')[1]
            }
        }
        const params = {
            ...getRequestParams(),
            type: fmAction,
            limit: dtInfo.recordsTotal,
            order: sorting
        }
        try {
            let fileName;
            fetch('/generate-excel', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(params)
            })
                .then(response => {
                    if (response.status !== 200) {
                        return null;
                    }
                    const headers = [...response.headers];
                    fileName = headers[1][1].slice(21)
                    return response.blob()
                })
                .then(blob => {
                    var url = window.URL.createObjectURL(blob);
                    var a = document.createElement('a');
                    a.href = url;
                    a.download = fileName;
                    document.body.appendChild(a); // we need to append the element to the dom -> otherwise it will not work in firefox
                    a.click();
                    a.remove();  //afterwards we remove the element again         
                });
        } catch (err) {
            console.error(err)
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const drpEl = document.querySelector('#drp');
        const daterangepicker = drpEl ? new DateRangePicker(drpEl, {
            format: 'yyyy-mm-dd',
            minDate: dateFns.subDays(new Date(), 180),
            maxDate: new Date(),
            buttonClass: 'btn',
        }) : null;
        if (daterangepicker) {
            daterangepicker.setDates(dateFns.startOfDay(new Date()), new Date());
        }

        const theads = [...document.querySelectorAll('#result th')];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        const columnDefs = getColumnDefs(fmAction);
        // init by dummy data
        // const ajaxUrl = `../../assets/data/${fmAction.split('/')[2]}.json`;
        // const dataTableInstance = initDataTable('#result', ajaxUrl, columns, [], null);

        const dataTableInstance = initDataTable('#result', fmAction, columns, columnDefs, null, getRequestParams);

        formEl.addEventListener('submit', (event) => {
            event.preventDefault();
            dataTableInstance.ajax.reload();
        });
        document.querySelector('.card-footer button[type=button]').addEventListener('click', (event) => {
            if (daterangepicker) {
                daterangepicker.setDates(dateFns.startOfDay(new Date()), new Date());
            }
            clearSelections('#machineIds');
        });
        if (btnExport) {
            btnExport.addEventListener('click', (event) => {
                exportData(dataTableInstance);
            })
        }
    }, false);
</script>
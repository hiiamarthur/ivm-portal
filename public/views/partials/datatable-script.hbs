<!-- pages with datatable -->
<!-- datatable -->
<link rel="stylesheet" type="text/css"
    href="https://cdn.datatables.net/v/bs5/jszip-2.5.0/dt-1.12.1/b-2.2.3/b-colvis-2.2.3/b-html5-2.2.3/b-print-2.2.3/kt-2.7.0/r-2.3.0/sl-1.4.0/datatables.min.css" />


<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
<script type="text/javascript"
    src="https://cdn.datatables.net/v/bs5/jszip-2.5.0/dt-1.12.1/b-2.2.3/b-colvis-2.2.3/b-html5-2.2.3/b-print-2.2.3/kt-2.7.0/r-2.3.0/sl-1.4.0/datatables.min.js"></script>

<script>
    /* reference
        "oLanguage": {
    "sLengthMenu": "Display _MENU_ records per page",
    "sZeroRecords": "Nothing found - sorry",
    "sInfo": "Showing _START_ to _END_ of _TOTAL_ records",
    "sInfoEmpty": "Showing 0 to 0 of 0 records",
    "sInfoFiltered": "(filtered from _MAX_ total records)"
    }*/
    let tableOptions = {
        lengthChange: true,
        oLanguage: {
            sLengthMenu: "每頁顯示 _MENU_ 項記錄",
            sInfo: 'Showing _START_ to _END_ of _TOTAL_ records',
            sZeroRecords: '沒有記錄',
            sInfoEmpty: '顯示 0 項記錄',
            sInfoFiltered: '',
        },
        lengthMenu: [25, 50, 75, 100],
        searching: false,
        data: [],
        dom: 'Blrtip',
        buttons: [
            {
                extend: 'colvis',
                className: 'btn-outline-dark',
                text: '顯示欄位',
                init: function (api, node, config) {
                    $(node).removeClass('btn-secondary')
                }
            }
        ],
        language: {
            paginate: {
                previous: "<i class='mdi mdi-chevron-left'>",
                next: "<i class='mdi mdi-chevron-right'>"
            }
        },
        columnDefs: [
            {
                searchable: false,
                targets: '_all',
            }
        ]
    };

    const getTableOptions = () => {
        return Object.assign({}, tableOptions);
    }

    const simpleDataTable = (tableId, ajaxUrl, formId, columnDefs) => {
        const tableEl = document.querySelector(`#${tableId}`);
        const theadId = `#${tableId} th`;
        const theads = [...document.querySelectorAll(theadId)];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        return new DataTable(tableEl, {
            columns: columns,
            dom: 'tip',
            searching: false,
            processing: true,
            serverSide: true,
            ajax: {
                url: ajaxUrl,
                method: 'POST',
                data: (d) => {
                    const result = getFormData(formId)
                    $.extend(d, result);
                }
            },
            columnDefs: [...columnDefs, { searchable: false, targets: '_all' }]
        })
    }

    const initDataTable = (tableId, ajaxUrl, columns, columnDefs, data, reqParamCallback) => {
        const tableEl = document.querySelector(tableId);
        if (!tableEl) {
            throw new Error('Table element not exist!');
        }
        if (columns) {
            tableOptions = { ...tableOptions, columns: columns }
        }
        if (columnDefs) {
            tableOptions.columnDefs = tableOptions.columnDefs.concat(columnDefs);
        }
        if (data && !reqParamCallback && !ajaxUrl) {
            tableOptions = { ...tableOptions, data: data };
        }

        if (ajaxUrl === 'iv_summary') {
            order = [[2, 'desc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if (ajaxUrl === 'iv_detail') {
            order = [[4, 'desc'], [0, 'asc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if (ajaxUrl === 'machine/list') {
            order = [[3, 'desc'], [0, 'desc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if (reqParamCallback) {
            tableOptions = {
                ...tableOptions,
                processing: true,
                serverSide: true,
                ajax: {
                    url: ajaxUrl,
                    method: 'POST',
                    data: (d) => {
                        const result = reqParamCallback()
                        $.extend(d, result);
                    }
                }
            };
        }

        const dataTableInstance = new DataTable(tableEl, tableOptions);
        return dataTableInstance;
    }

    const initMachineTables = (tableId, columnDefs) => {
        const machineId = document.querySelector('#mainMachineId').textContent;
        const theadId = `#${tableId} th`;
        const theads = [...document.querySelectorAll(theadId)];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        const tableOps = getTableOptions();
        tableOps.autoWidth = false
        if (tableId.indexOf('channel') === -1) {
            tableOps.buttons = tableOps.buttons.concat([
                {
                    text: '<i class="mdi mdi-plus-circle me-2"></i> 新增',
                    className: 'btn mx-2 createBtn d-none',
                    attr: {
                        id: `${tableId}-creatBtn`
                    },
                    action: function (e, dt, node, config) {
                        alert('Activated!');
                        this.disable(); // disable button
                    }
                }
            ]);
        }

        const rowControls = [
            {
                data: null,
                orderable: false,
                className: 'row-view dt-center d-none',
                render: function (data, type, row) {
                    
                    return `<i class="fas fa-eye"/>`
                },
                createdCell: function (td, cellData, rowData, rowIndex, colIndex) {
                    td.addEventListener('click', (event) => {
                        let href = '';
                        const obj = Object.entries(rowData);
                        if(tableId === 'machine-product' || tableId === 'machine-stock') {
                            href = `/machine/product-sku?machineId=${machineId}&viewOnly=true&itemId=${obj[0][1]}`;
                            window.location.href = href;
                        }
                        event.preventDefault();
                    })
                },
                targets: [-2]
            }, {
                data: null,
                orderable: false,
                className: 'row-remove dt-center d-none',
                render: function (data, type, row) {
                    return `<i class="fa fa-trash"/>`
                },
                createdCell: function (td, cellData, rowData, rowIndex, colIndex) {
                    td.addEventListener('click', (event) => {
                        const obj = Object.entries(rowData);
                        alert(`delete machineId: ${machineId} ${obj[0][0]}: ${obj[0][1]}`);
                        event.preventDefault();
                    })
                },
                targets: [-1]
            }]
        
        tableOps.columns = columns;
        if (tableId.indexOf('channel') === -1) {
            tableOps.columnDefs = tableOps.columnDefs.concat(rowControls)
        } else {
            tableOps.columnDefs.push({
                data: null,
                orderable: false,
                //className: 'row-clear-error',
                render: function (data, type, row) {
                    const controlBtns = '<div class="activeBtns d-none">' +
                        `<a href="javascript:void(0);" data-rowid="${row.DT_RowId}" class="btn btn-outline-dark me-1" onclick="saveChannel(this)"></i>儲存</a>` +
                        `<a href="javascript:void(0);" data-rowid="${row.DT_RowId}" class="btn btn-outline-dark" onclick="hideControls(this)"></i>取消</a>` +
                        '</div>' +
                        '<div class="deactiveBtns">' + 
                        `<a href="javascript:void(0);" data-rowid="${row.DT_RowId}" class="btn btn-outline-dark me-1" onclick="editChannel(this)"></i>編輯</a>` +
                        `<a href="javascript:void(0);" data-rowid="${row.DT_RowId}" class="btn btn-outline-dark" onclick="clearChError(this)">清除錯誤</a>` +
                        '</div>';
                    return controlBtns;
                },
                
                targets: [-1]
            })
        }

        if (columnDefs) {
            tableOps.columnDefs = tableOps.columnDefs.concat(columnDefs);
        }

        delete tableOps.data;

        const dtNew = new DataTable(document.querySelector(`#${tableId}`), tableOps)

        const rows = [...document.querySelectorAll(`#${tableId} tbody tr`)];
        rows.forEach(r => {
            r.addEventListener('click', (event) => {
                removeClass(rows, 'table-light')
                r.classList.add('table-light')
                event.preventDefault();
            })
        })
        const createBtn = document.querySelector(`#${tableId}-creatBtn`);
        if (createBtn) {
            createBtn.classList.remove('btn-secondary')
            createBtn.classList.add('btn-success')
            createBtn.classList.add('rounded')
            createBtn.addEventListener('click', (event) => {
                switch (tableId) {
                    case 'machine-product':
                    case 'machine-stock':
                    default:
                        return null
                }
            })
        }
        
        dtNew.buttons().container().addClass('mb-1');

        return dtNew
    }

    const removeClass = (list, className) => {
        list.every((item) => {
            item.classList.remove(className)
            return item
        })
    }
</script>
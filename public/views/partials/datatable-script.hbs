<!-- pages with datatable -->
<!-- datatable -->
<link rel="stylesheet" type="text/css"
    href="https://cdn.datatables.net/v/bs5/jszip-2.5.0/dt-1.12.1/b-2.2.3/b-colvis-2.2.3/b-html5-2.2.3/b-print-2.2.3/kt-2.7.0/r-2.3.0/sl-1.4.0/datatables.min.css" />


<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/pdfmake.min.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.36/vfs_fonts.js"></script>
<script type="text/javascript"
    src="https://cdn.datatables.net/v/bs5/jszip-2.5.0/dt-1.12.1/b-2.2.3/b-colvis-2.2.3/b-html5-2.2.3/b-print-2.2.3/kt-2.7.0/r-2.3.0/sl-1.4.0/datatables.min.js"></script>

<script>
    /* reference
        "oLanguage": {
    "sLengthMenu": "Display _MENU_ records per page",
    "sZeroRecords": "Nothing found - sorry",
    "sInfo": "Showing _START_ to _END_ of _TOTAL_ records",
    "sInfoEmpty": "Showing 0 to 0 of 0 records",
    "sInfoFiltered": "(filtered from _MAX_ total records)"
    }*/
    let tableOptions = {
        lengthChange: true,
        oLanguage: {
            sLengthMenu: "每頁顯示 _MENU_ 項記錄",
            sInfo: 'Showing _START_ to _END_ of _TOTAL_ records',
            sZeroRecords: '沒有記錄',
            sInfoEmpty: '顯示 0 項記錄',
            sInfoFiltered: '',
        },
        lengthMenu: [25, 50, 75, 100],
        searching: false,
        data: [],
        dom: 'Blrtip',
        buttons: [
            {
                extend: 'colvis',
                className: 'btn-outline-dark',
                text: '顯示欄位',
                init: function (api, node, config) {
                    $(node).removeClass('btn-secondary')
                }
            }
        ],
        language: {
            paginate: {
                previous: "<i class='mdi mdi-chevron-left'>",
                next: "<i class='mdi mdi-chevron-right'>"
            }
        },
        columnDefs: [
            {
                searchable: false,
                targets: '_all',
            }
        ]
    };

    const getTableOptions = () => {
        return Object.assign({}, tableOptions);
    }

    const getColumnDefs = (action) => {
        switch (action) {
            case 'machine/list':
                return [{
                    render: function (data, type, row) {
                        switch(data.toLowerCase()){
                            case 'offline':
                            return `<span class="badge bg-danger">${data}</span>`;
                            case 'online':
                            return `<span class="badge bg-success">${data}</span>`;
                            default: 
                            return data
                        }
                        return data ? parseFloat(data) : '-';
                    },
                    targets: 3
                },
                {
                    type: 'num',
                    render: function (data, type, row) {
                        return data ? parseFloat(data) : '-';
                    },
                    targets: 5
                }]
            case 'voucher/list':
                return [
                    {
                        orderable: false,
                        targets: [0, 5, 6, 7, 8, -2, -1]
                    },
                    {
                        render: function (data, type, row) {
                            switch(data) {
                                case true:
                                    return `<i class="text-success fa fa-circle-check"/>`;
                                case false:
                                    return `<i class="text-danger fa fa-circle-xmark"/>`;
                                default: 
                                    return '';
                            }
                        },
                        targets: [6, 8, -2]
                    },
                    {
                        type: 'date',
                        render: function (data, type, row) {
                            if (!data) {
                                return null
                            }
                            return dateFns.format(new Date(data), 'yyyy-MM-dd HH:mm:ss')
                        },
                        targets: [3, -4, -3]
                    }
                ]
            case 'campaign':
                return [
                    {
                        orderable: false,
                        targets: [2, -1]
                    },
                    {
                        render: function (data, type, row) {
                            switch(data) {
                                case true:
                                    return `<i class="text-success fa fa-circle-check"/>`;
                                case false:
                                    return `<i class="text-danger fa fa-circle-xmark"/>`;
                                default: 
                                    return '';
                            }
                        },
                        targets: [2]
                    },
                    {
                        type: 'date',
                        render: function (data, type, row) {
                            if (!data) {
                                return null
                            }
                            return dateFns.format(new Date(data), 'yyyy-MM-dd HH:mm:ss')
                        },
                        targets: [-5, -4, -3, -2]
                    }
                ]
            case 'voucher':
                return [
                    {
                        orderable: false,
                        targets: [0, 5, 6, 7, 8, -1]
                    },
                    {
                        render: function (data, type, row) {
                            switch(data) {
                                case true:
                                    return `<i class="text-success fa fa-circle-check"/>`;
                                case false:
                                    return `<i class="text-danger fa fa-circle-xmark"/>`;
                                default: 
                                    return '';
                            }
                        },
                        targets: [6, 8]
                    },
                    {
                        type: 'date',
                        render: function (data, type, row) {
                            if (!data) {
                                return null
                            }
                            return dateFns.format(new Date(data), 'yyyy-MM-dd HH:mm:ss')
                        },
                        targets: [3, -4, -3]
                    },
                    {
                        stype: 'date',
                        render: function (data, type, row) {
                            if (!data) {
                                return null
                            }
                            return `${dateFns.format(new Date(data), 'yyyy-MM-dd HH:mm')}:00`
                        },
                        targets: [-2]
                    }
                ]
            default:
                return null;
        }
    }

    const simpleDataTable = (tableId, ajaxUrl, formId, columnDefs) => {
        const tableEl = document.querySelector(`#${tableId}`);
        const theadId = `#${tableId} th`;
        const theads = [...document.querySelectorAll(theadId)];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        return new DataTable(tableEl, {
            columns: columns,
            dom: 'tip',
            searching: false,
            processing: true,
            serverSide: true,
            ajax: {
                url: ajaxUrl,
                method: 'POST',
                data: (d) => {
                    const result = getFormData(formId)
                    $.extend(d, result);
                }
            },
            columnDefs: [...columnDefs, { searchable: false, targets: '_all' }]
        })
    }

    const initDataTable = (tableId, ajaxUrl, reqParamCallback, data) => {
        const tableEl = document.querySelector(tableId);
        if (!tableEl) {
            throw new Error('Table element not exist!');
        }
        const theads = [...document.querySelectorAll('#result th')];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        if (columns) {
            tableOptions = { ...tableOptions, columns: columns }
        }
        const columnDefs = getColumnDefs(fmAction);
        if (columnDefs) {
            tableOptions.columnDefs = tableOptions.columnDefs.concat(columnDefs);
        }
        if (data && !reqParamCallback && !ajaxUrl) {
            tableOptions = { ...tableOptions, data: data };
        }

        if (ajaxUrl === 'iv_summary') {
            order = [[2, 'desc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if (ajaxUrl === 'iv_detail') {
            order = [[4, 'desc'], [0, 'asc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if (ajaxUrl === 'machine/list') {
            order = [[3, 'desc'], [0, 'desc']]
            tableOptions = { ...tableOptions, order: order }
        }

        if(ajaxUrl === 'voucher/list' || ajaxUrl === 'voucher') {
            order = [[1, 'desc'], [2, 'desc'], [3, 'desc']]
            tableOptions = { ...tableOptions, order: order }
        }
        
        if (reqParamCallback) {
            tableOptions = {
                ...tableOptions,
                processing: true,
                serverSide: true,
                ajax: {
                    url: ajaxUrl,
                    method: 'POST',
                    data: (d) => {
                        const result = reqParamCallback()
                        $.extend(d, result);
                    }
                }
            };
        }

        const dataTableInstance = new DataTable(tableEl, tableOptions);
        return dataTableInstance;
    }

    const initMachineTables = (tableId, columnDefs) => {
        const machineId = document.querySelector('#mainMachineId').textContent;
        const theadId = `#${tableId} th`;
        const theads = [...document.querySelectorAll(theadId)];
        const columns = theads.map(th => {
            const dataVal = th.getAttribute('id');
            const titleVal = th.textContent || th.innerText;
            return { data: dataVal, title: titleVal }
        });
        const tableOps = getTableOptions();
        tableOps.autoWidth = false;
        
        tableOps.columns = columns;

        if (columnDefs) {
            tableOps.columnDefs = tableOps.columnDefs.concat(columnDefs);
        }

        delete tableOps.data;

        const dtNew = new DataTable(document.querySelector(`#${tableId}`), tableOps)

        const rows = [...document.querySelectorAll(`#${tableId} tbody tr`)];
        rows.forEach(r => {
            r.addEventListener('mouseover', (event) => {
                removeClass(rows, 'table-light')
                r.classList.add('table-light')
                event.preventDefault();
            })
        })
        
        dtNew.buttons().container().addClass('mb-1');

        return dtNew
    }

    const removeClass = (list, className) => {
        list.every((item) => {
            item.classList.remove(className)
            return item
        })
    }
</script>